(For disambiguation, I refer to registers 0-5 as a-f.)

(register b = instruction pointer)
#ip 1

START:
    seti 123 0 3            # 00: d = 123
TEST_1:
    bani 3 456 3            # 01: d &= 456
    eqri 3 72 3             # 02: d = (d == 72 ? 1 : 0)
    addr 3 1 1              # 03: jump +d
(if d != 72)
    seti 0 0 1              # 04: jump TEST_1 (1)
(if d == 72)
TEST_2:
    seti 0 1 3              # 05: d = 0
LOOP_1:
    bori 3 65536 2          # 06: c = d | 65536
    seti 1505483 6 3        # 07: d = 1505483
LOOP_2:
    bani 2 255 4            # 08: e = c & 255
    addr 3 4 3              # 09: d += e
    bani 3 16777215 3       # 10: d &= 16777215
    muli 3 65899 3          # 11: d *= 65899
    bani 3 16777215 3       # 12: d &= 16777215
    gtir 256 2 4            # 13: e = (256 > c ? 1 : 0)
    addr 4 1 1              # 14: jump +e
    addi 1 1 1              # 15: jump 17
    seti 27 6 1             # 16: jump LOOP_2_END (28)
    seti 0 3 4              # 17: e = 0
LOOP_3:
    addi 4 1 5              # 18: f = e + 1
    muli 5 256 5            # 19: f *= 256
    gtrr 5 2 5              # 20: f = (f > c ? 1 : 0)
    addr 5 1 1              # 21: jump +f
(if f <= c)
    addi 1 1 1              # 22: jump 24
(if f > c)
    seti 25 4 1             # 23: jump LOOP_3_END (26)
(if f <= c, cont'd)
    addi 4 1 4              # 24: e += 1
    seti 17 3 1             # 25: jump LOOP_3
LOOP_3_END:
    setr 4 1 2              # 26: c = e
    seti 7 4 1              # 27: jump LOOP_2
LOOP_2_END:
    eqrr 3 0 4              # 28: e = (d == a ? 1 : 0)
    addr 4 1 1              # 29: jump +e
(if d != a)
    seti 5 9 1              # 30: jump LOOP_1
(if d == a)
LOOP_1_END:
END:

Pseudocode
==========

// Check that bitwise and works correctly
d = 123
while d != 72:
    d &= 456

d = 0
while true:
    c = d | 65536
    d = 1505483
    while true:
        // e = c % 256
        e = c & 255
        d = (((d + e) & 16777215) * 65899) & 16777215

        // stop updating d when c < 256
        if 256 > c:
            break

        // c = c / 256
        e = 0
        while true:
            f = (e + 1) * 256
            if f > c:
                break
            e += 1
        c = e


    if d == a:
        return